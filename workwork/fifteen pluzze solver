import heapq
import numpy as np
import itertools

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0, cost=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost
        self.priority = self.depth + self.heuristic()

    def __lt__(self, other):
        return self.priority < other.priority

    def heuristic(self):
        goal = np.array(range(1, 16)).reshape(4, 4)
        goal = np.append(goal, 0).reshape(4, 4)
        return np.sum(self.state != goal) - 1  # Manhattan Distance Approximation

    def generate_children(self):
        children = []
        x, y = np.where(self.state == 0)
        x, y = int(x), int(y)
        moves = {"U": (x-1, y), "D": (x+1, y), "L": (x, y-1), "R": (x, y+1)}
        for move, (nx, ny) in moves.items():
            if 0 <= nx < 4 and 0 <= ny < 4:
                new_state = self.state.copy()
                new_state[x, y], new_state[nx, ny] = new_state[nx, ny], new_state[x, y]
                children.append(PuzzleNode(new_state, self, move, self.depth + 1))
        return children

def solve_puzzle(start_state):
    start_node = PuzzleNode(start_state)
    frontier = [start_node]
    explored = set()
    
    while frontier:
        node = heapq.heappop(frontier)
        if np.array_equal(node.state, np.append(np.arange(1, 16), 0).reshape(4, 4)):
            return get_solution_path(node)
        explored.add(tuple(node.state.flatten()))
        for child in node.generate_children():
            if tuple(child.state.flatten()) not in explored:
                heapq.heappush(frontier, child)
    return None

def get_solution_path(node):
    path = []
    while node.parent:
        path.append(node.move)
        node = node.parent
    return path[::-1]

if __name__ == "__main__":
    start_state = np.array([[1, 2, 3, 4],
                             [5, 6, 7, 8],
                             [9, 10, 11, 0],
                             [13, 14, 15, 12]])
    solution = solve_puzzle(start_state)
    if solution:
        print("Solution found:", solution)
    else:
        print("No solution possible.")
